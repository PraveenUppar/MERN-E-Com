import { useEffect, useState } from "react";
import { Link, useLocation } from "react-router-dom";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import Spinner from "../components/Spinner";

//  It stores the user's information in your application's state and also saves it to the browser's local storage so that the user stays logged in
import { setCredentials } from "../slices/userSlice";
// Handles the query for login and reset password
import {
  useForgotPasswordMutation,
  useLoginMutation,
} from "../slices/userApiSlice";
import { useDispatch, useSelector } from "react-redux";
import { BACKEND_URL } from "../constants";

export default function LoginPage() {
  // useDispatch is used to dispatch actions to the Redux store
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  // useLoginMutation and useForgotPasswordMutation are hooks generated by RTK Query
  // They are used to perform the login and forgot password operations respectively
  // login: This is a function you can call to actually trigger the login API request.
  const [login, { isLoading }] = useLoginMutation();

  const [forgotPassword, { isLoading: isLoadingPassword }] =
    useForgotPasswordMutation();

  // handleLogin function is called when the user submits the login form
  // It prevents the default form submission behavior, calls the login mutation with the email and password
  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      //  call the login function from the hook. It sends the user's email and password to the API.
      const res = await login({ email, password }).unwrap();
      dispatch(setCredentials({ ...res })); // . It's the function that will update the user's credentials in the Redux store.
      navigate("/");
      toast.success("Login Successful");
    } catch (error) {
      toast.error(error?.data?.message || error?.error);
    }
  };

  // handleGoogleAuth function
  // It redirects the user to the Google authentication endpoint
  const handleGoogleAuth = () => {
    try {
      window.location.href = `${BACKEND_URL}/auth/google/callback`;
    } catch (err) {
      toast.error(err?.data?.message || err.error);
    }
  };

  // It checks if the email is provided, then calls the forgotPassword mutation with the email
  const handleForgotPassword = async () => {
    if (!email) alert("Please enter your email");
    else {
      try {
        const res = await forgotPassword({ email }).unwrap();
        toast.success(res.message);
      } catch (err) {
        toast.error(err?.data?.message || err.error);
      }
    }
  };

  // useSelector is used to access the user information from the Redux store
  // It retrieves the userInfo from the user slice of the Redux store
  const { userInfo } = useSelector((state) => state.user);

  //Imagine a user is already logged in. Without this useEffect hook, if they manually type /login into their browser's address bar, they would see the login form again, which is bad user experience.
  // This code ensures that any logged-in user who tries to access a restricted page like the login screen is immediately redirected to a more appropriate page,

  // checks if the user is already logged in and redirects them to the specified redirect URL
  // If the user is logged in, they will be redirected to the home page or the page specified in the redirect query parameter
  useEffect(() => {
    if (userInfo) {
      navigate(redirect);
    }
  }, [navigate, redirect, userInfo]);

  // useLocation is used to get the current location object, which contains information about the URL
  // This is useful for handling redirects after login
  const { search } = useLocation();
  // URLSearchParams is used to parse the query string from the URL
  // It allows you to easily access the parameters in the query string
  const sp = new URLSearchParams(search);
  const redirect = sp.get("redirect") || "/";

  return (
    <div className="container mx-auto mt-8 mb-28 p-4 max-w-md ">
      <h2 className="text-2xl font-semibold mb-4">Login</h2>
      <form onSubmit={handleLogin}>
        <div className="mb-4">
          <label htmlFor="email" className="text-gray-700">
            Email:
          </label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="bg-white border border-gray-300 p-2 rounded-md mt-2 w-full"
          />
        </div>
        <div className="mb-4">
          <label htmlFor="password" className="text-gray-700">
            Password:
          </label>
          <input
            type="password"
            id="password"
            className="bg-white border border-gray-300 p-2 rounded-md mt-2 w-full"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </div>
        <p className="mt-1">
          Forgot Password?{" "}
          <span
            className="text-blue-500 cursor-pointer"
            onClick={handleForgotPassword}
          >
            Click here
          </span>
        </p>
        {isLoadingPassword && <Spinner />}
        <button
          type="submit"
          className="bg-blue-500 text-white px-4 py-2 rounded-md mt-4 hover:bg-blue-600"
          onClick={handleLogin}
          disabled={isLoading}
        >
          Login
        </button>
        <button
          type="button"
          className="bg-red-600 text-white px-4 py-2 rounded-md mt-4 ml-3 hover:bg-red-700"
          onClick={handleGoogleAuth}
        >
          Sign in with Google
        </button>
        {isLoading && <Spinner />}
      </form>
      <p className="mt-4">
        Don't have an account?{" "}
        <Link to="/register" className="text-blue-500">
          Register here
        </Link>
        .
      </p>
    </div>
  );
}
