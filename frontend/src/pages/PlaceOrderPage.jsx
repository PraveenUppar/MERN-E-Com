import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import Spinner from "../components/Spinner";

import { useDispatch, useSelector } from "react-redux";
import { clearCartItems } from "../slices/cartSlice";
import { useCreateOrderMutation } from "../slices/orderApiSlice";

export default function PlaceOrderScreen() {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  // useSelector lets extract data from your global Redux store
  // select the cart state from the redux store
  const cart = useSelector((state) => state.cart);
  // extract the details needed from the cart to send it as parameter to the redux query createOrder to create a new order
  const {
    cartItems,
    shippingAddress: { address, city, postalCode, country },
    paymentMethod,
    itemsPrice,
    shippingPrice,
    taxPrice,
    totalPrice,
  } = cart;

  // useCreateOrderMutation are hooks generated by RTK Query
  // createOrder: This is a function you can call to actually trigger the create order API request.
  const [createOrder, { isLoading }] = useCreateOrderMutation();

  // handlePlaceOrder function
  const handlePlaceOrder = async () => {
    try {
      // call the createOrder and pass the parameters
      const res = await createOrder({
        orderItems: cartItems,
        shippingAddress: { address, city, postalCode, country },
        paymentMethod,
        itemsPrice,
        shippingPrice,
        taxPrice,
        totalPrice,
      }).unwrap();
      // This action clears the cartItems array and updates the local storage
      dispatch(clearCartItems());
      toast.success("Order Placed!");
      navigate(`/order/${res._id}`); // After successfull order place redirec to the order/order_id
    } catch (err) {
      toast.error(err?.data?.message || err.error);
    }
  };

  return (
    <div className="flex flex-col md:flex-row justify-center items-start">
      <div className="md:w-2/3 p-4">
        <h2 className="text-2xl font-semibold mb-4">Place Order</h2>
        <div className="mb-4">
          <h3 className="text-lg font-semibold mb-2">Shipping Address:</h3>
          <p>
            {address}, {city}, {postalCode}, {country}
          </p>
        </div>
        <div className="mb-4">
          <h3 className="text-lg font-semibold mb-2">Payment Method:</h3>
          <p>{paymentMethod}</p>
        </div>
      </div>

      <div className="md:w-1/3 bg-gray-100 p-4">
        <h3 className="text-xl font-semibold mb-4">Order Summary</h3>
        <table className="w-full border-collapse">
          <thead>
            <tr>
              <th className="text-left">Product</th>
              <th className="text-right">Quantity</th>
              <th className="text-right">Price</th>
            </tr>
          </thead>
          <tbody>
            {cartItems.map((item) => (
              <tr key={item._id} className="border-b border-gray-400">
                <td className="text-left">{item.name}</td>
                <td className="text-right">{item.qty}</td>
                <td className="text-right">
                  ${(item.price * item.qty).toFixed(2)}
                </td>
              </tr>
            ))}
            <tr className="border-b border-gray-400">
              <td className="text-left font-semibold">Shipping</td>
              <td className="text-right"></td>
              <td className="text-right">${shippingPrice}</td>
            </tr>
            <tr className="border-b border-gray-400">
              <td className="text-left font-semibold">Tax</td>
              <td className="text-right"></td>
              <td className="text-right">${taxPrice}</td>
            </tr>
          </tbody>
        </table>
        <div className="mt-4">
          <p className="text-right font-semibold">Total: ${totalPrice}</p>
        </div>
        <button
          className="bg-yellow-500 hover:bg-yellow-600 text-white font-semibold py-2 px-4 rounded w-full mt-4"
          onClick={handlePlaceOrder}
        >
          Place Order
        </button>
        {isLoading && <Spinner />}
      </div>
    </div>
  );
}
